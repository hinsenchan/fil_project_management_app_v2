/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.src.frugalinnovationlab.view;

import com.src.frugalinnovationlab.Controller.EditProjectMultimediaController;
import com.src.frugalinnovationlab.Entity.MediaAdobe;
import com.src.frugalinnovationlab.Entity.MediaAdobePK;
import com.src.frugalinnovationlab.Entity.MediaCad;
import com.src.frugalinnovationlab.Entity.MediaCadPK;
import com.src.frugalinnovationlab.Entity.MediaCode;
import com.src.frugalinnovationlab.Entity.MediaCodePK;
import com.src.frugalinnovationlab.Entity.MediaHyperlink;
import com.src.frugalinnovationlab.Entity.MediaPdf;
import com.src.frugalinnovationlab.Entity.MediaPdfPK;
import com.src.frugalinnovationlab.Entity.MediaPhotos;
import com.src.frugalinnovationlab.Entity.MediaPhotosPK;
import com.src.frugalinnovationlab.Entity.MediaPlaintext;
import com.src.frugalinnovationlab.Entity.MediaPlaintextPK;
import com.src.frugalinnovationlab.Entity.MediaSpreadsheet;
import com.src.frugalinnovationlab.Entity.MediaSpreadsheetPK;
import com.src.frugalinnovationlab.Entity.MediaVideo;
import com.src.frugalinnovationlab.Entity.MediaVideoPK;
import com.src.frugalinnovationlab.Entity.MediaWord;
import com.src.frugalinnovationlab.Entity.MediaWordPK;
import com.src.frugalinnovationlab.Entity.Project;
import java.util.List;
import com.src.frugalinnovationlab.Wrappers.ComboItem;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author diptik
 */
public class EditProjectMultimedia extends javax.swing.JPanel {

    EditProjectMultimediaController editProjectMultimediaController;
    List<Project> projectList;
    List<MediaAdobe> adobeFileList = new ArrayList<MediaAdobe>();
    List<MediaCad> cadFileList = new ArrayList<MediaCad>();
    List<MediaCode> codeFileList = new ArrayList<MediaCode>();
    List<MediaHyperlink> hyperLinkList = new ArrayList<MediaHyperlink>();
    List<MediaPdf> pdfList = new ArrayList<MediaPdf>();
    List<MediaPhotos> photosList = new ArrayList<MediaPhotos>();
    List<MediaPlaintext> plainTextList = new ArrayList<MediaPlaintext>();
    List<MediaSpreadsheet> spreadSheetList = new ArrayList<MediaSpreadsheet>();
    List<MediaVideo> videoList = new ArrayList<MediaVideo>();
    List<MediaWord> wordList = new ArrayList<MediaWord>();

    /**
     * Creates new form EditGeneralProjectInformation
     */
    public EditProjectMultimedia() {
        editProjectMultimediaController = new EditProjectMultimediaController(this);
        projectList = editProjectMultimediaController.getProjectsFromDatabase();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        multimediaScrollPane = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        clearPhotosButton1 = new javax.swing.JButton();
        locationClientMapLabel1 = new javax.swing.JLabel();
        addLinkTextField2 = new javax.swing.JTextField();
        addPlainTextFileButton1 = new javax.swing.JButton();
        videoLabel1 = new javax.swing.JLabel();
        clearPdfButton1 = new javax.swing.JButton();
        clearWordButton1 = new javax.swing.JButton();
        spreadsheetLabel1 = new javax.swing.JLabel();
        clearCadDocsButton1 = new javax.swing.JButton();
        addCodeButton1 = new javax.swing.JButton();
        addAdobeTextField1 = new javax.swing.JTextField();
        addCodeTextField1 = new javax.swing.JTextField();
        addWordDocumentButton1 = new javax.swing.JButton();
        clearLinkButton2 = new javax.swing.JButton();
        wordDocumentLabel1 = new javax.swing.JLabel();
        clearPlainButton1 = new javax.swing.JButton();
        hyperlinkLabel1 = new javax.swing.JLabel();
        addHyperlinkButton1 = new javax.swing.JButton();
        addAdobeTextField2 = new javax.swing.JTextField();
        addSpreadsheetButton1 = new javax.swing.JButton();
        adobeFilesLabel1 = new javax.swing.JLabel();
        clearSpreadSheetButton1 = new javax.swing.JButton();
        addPhotoButton1 = new javax.swing.JButton();
        addPhotosTextField1 = new javax.swing.JTextField();
        addWordTextField1 = new javax.swing.JTextField();
        plainTextFileLabel1 = new javax.swing.JLabel();
        addPdfTextField1 = new javax.swing.JTextField();
        addButton1 = new javax.swing.JButton();
        addNewProjectTextArea2 = new javax.swing.JLabel();
        addadobefileButton1 = new javax.swing.JButton();
        codeLabel1 = new javax.swing.JLabel();
        addCadDocsTextField1 = new javax.swing.JTextField();
        clearLinkButton1 = new javax.swing.JButton();
        clearCodeButton2 = new javax.swing.JButton();
        addVideoTextField1 = new javax.swing.JTextField();
        addSpreadSheetTextField1 = new javax.swing.JTextField();
        addPlainTextField1 = new javax.swing.JTextField();
        cadDocumentLabel1 = new javax.swing.JLabel();
        addCADDocumentButton1 = new javax.swing.JButton();
        clearVideoButton1 = new javax.swing.JButton();
        addPDFButton1 = new javax.swing.JButton();
        addLocationClientMapButton1 = new javax.swing.JButton();
        pdfLabel1 = new javax.swing.JLabel();
        photosLabel1 = new javax.swing.JLabel();
        clearAdobeFilesButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        updateAdobeButton = new javax.swing.JButton();
        updateCadButton = new javax.swing.JButton();
        updateCodeButton = new javax.swing.JButton();
        updatePdfButton = new javax.swing.JButton();
        updatePhotosButton = new javax.swing.JButton();
        updatePlainTextButton = new javax.swing.JButton();
        updateSpreadSheetsButton = new javax.swing.JButton();
        updateVideosButton = new javax.swing.JButton();
        updateWordDocsButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(600, 600));

        multimediaScrollPane.setBorder(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        clearPhotosButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearPhotosButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearPhotosButton1.setText("Clear");
        clearPhotosButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPhotosButton1ActionPerformed(evt);
            }
        });

        locationClientMapLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        locationClientMapLabel1.setText("Location/Client Map");

        addLinkTextField2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addLinkTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLinkTextField2ActionPerformed(evt);
            }
        });

        addPlainTextFileButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addPlainTextFileButton1.setForeground(new java.awt.Color(0, 95, 45));
        addPlainTextFileButton1.setText("Add Plain Text File");
        addPlainTextFileButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlainTextFileButton1ActionPerformed(evt);
            }
        });

        videoLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        videoLabel1.setText("Video");

        clearPdfButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearPdfButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearPdfButton1.setText("Clear");
        clearPdfButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPdfButton1ActionPerformed(evt);
            }
        });

        clearWordButton1.setText("Clear");
        clearWordButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearWordButton1ActionPerformed(evt);
            }
        });

        spreadsheetLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        spreadsheetLabel1.setText("Spreadsheets");

        clearCadDocsButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearCadDocsButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearCadDocsButton1.setText("Clear");
        clearCadDocsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCadDocsButton1ActionPerformed(evt);
            }
        });

        addCodeButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addCodeButton1.setForeground(new java.awt.Color(0, 95, 45));
        addCodeButton1.setText("Add Code");
        addCodeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCodeButton1ActionPerformed(evt);
            }
        });

        addAdobeTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addAdobeTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdobeTextField1ActionPerformed(evt);
            }
        });

        addCodeTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addCodeTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCodeTextField1ActionPerformed(evt);
            }
        });

        addWordDocumentButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addWordDocumentButton1.setForeground(new java.awt.Color(0, 95, 45));
        addWordDocumentButton1.setText("Add Word Document");
        addWordDocumentButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWordDocumentButton1ActionPerformed(evt);
            }
        });

        clearLinkButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearLinkButton2.setForeground(new java.awt.Color(225, 28, 29));
        clearLinkButton2.setText("Clear");
        clearLinkButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLinkButton2ActionPerformed(evt);
            }
        });

        wordDocumentLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        wordDocumentLabel1.setText("Word Documents");
        wordDocumentLabel1.setToolTipText("");

        clearPlainButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearPlainButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearPlainButton1.setText("Clear");
        clearPlainButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPlainButton1ActionPerformed(evt);
            }
        });

        hyperlinkLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        hyperlinkLabel1.setText("HyperLinks");

        addHyperlinkButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addHyperlinkButton1.setForeground(new java.awt.Color(0, 95, 45));
        addHyperlinkButton1.setText("Add HyperLink");
        addHyperlinkButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHyperlinkButton1ActionPerformed(evt);
            }
        });

        addAdobeTextField2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addAdobeTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdobeTextField2ActionPerformed(evt);
            }
        });

        addSpreadsheetButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addSpreadsheetButton1.setForeground(new java.awt.Color(0, 95, 45));
        addSpreadsheetButton1.setText("Add SpreadSheet");
        addSpreadsheetButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSpreadsheetButton1ActionPerformed(evt);
            }
        });

        adobeFilesLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        adobeFilesLabel1.setText("Adobe Files");

        clearSpreadSheetButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearSpreadSheetButton1.setText("Clear");
        clearSpreadSheetButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSpreadSheetButton1ActionPerformed(evt);
            }
        });

        addPhotoButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addPhotoButton1.setForeground(new java.awt.Color(0, 95, 45));
        addPhotoButton1.setText("Add Photo");
        addPhotoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPhotoButton1ActionPerformed(evt);
            }
        });

        addWordTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        plainTextFileLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        plainTextFileLabel1.setText("Plain Text Files");
        plainTextFileLabel1.setToolTipText("");

        addPdfTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        addButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addButton1.setForeground(new java.awt.Color(0, 95, 45));
        addButton1.setText("Add Video");
        addButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButton1ActionPerformed(evt);
            }
        });

        addNewProjectTextArea2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        addNewProjectTextArea2.setText("Edit Project Multimedia");

        addadobefileButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addadobefileButton1.setForeground(new java.awt.Color(0, 95, 45));
        addadobefileButton1.setText("Add Adobe File");
        addadobefileButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addadobefileButton1ActionPerformed(evt);
            }
        });

        codeLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        codeLabel1.setText("Code");

        addCadDocsTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addCadDocsTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCadDocsTextField1ActionPerformed(evt);
            }
        });

        clearLinkButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearLinkButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearLinkButton1.setText("Clear");
        clearLinkButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLinkButton1ActionPerformed(evt);
            }
        });

        clearCodeButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearCodeButton2.setForeground(new java.awt.Color(225, 28, 29));
        clearCodeButton2.setText("Clear");
        clearCodeButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCodeButton2ActionPerformed(evt);
            }
        });

        addVideoTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        addSpreadSheetTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        addPlainTextField1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        cadDocumentLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cadDocumentLabel1.setText("CAD Documents");

        addCADDocumentButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addCADDocumentButton1.setForeground(new java.awt.Color(0, 95, 45));
        addCADDocumentButton1.setText("Add CAD Docs");
        addCADDocumentButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCADDocumentButton1ActionPerformed(evt);
            }
        });

        clearVideoButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearVideoButton1.setText("Clear");
        clearVideoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearVideoButton1ActionPerformed(evt);
            }
        });

        addPDFButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addPDFButton1.setForeground(new java.awt.Color(0, 95, 45));
        addPDFButton1.setText("Add PDF");
        addPDFButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPDFButton1ActionPerformed(evt);
            }
        });

        addLocationClientMapButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        addLocationClientMapButton1.setForeground(new java.awt.Color(0, 95, 45));
        addLocationClientMapButton1.setText("Add Location/Client Map");

        pdfLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        pdfLabel1.setText("PDF");

        photosLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        photosLabel1.setText("Photos");

        clearAdobeFilesButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        clearAdobeFilesButton1.setForeground(new java.awt.Color(225, 28, 29));
        clearAdobeFilesButton1.setText("Clear");
        clearAdobeFilesButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAdobeFilesButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setText("Project Title");

        jComboBox1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 95, 45));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a Project" }));
        for (int i = 0; i < projectList.size(); i++) {
            //System.out.println("id : " +projectList.get(i).getId());
            jComboBox1.addItem(new ComboItem(projectList.get(i).getName(),
                String.valueOf(projectList.get(i).getId())));
    }
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jComboBox1ActionPerformed(evt);
        }
    });

    updateAdobeButton.setText("Update Adobe");
    updateAdobeButton.setEnabled(false);
    updateAdobeButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateAdobeButtonActionPerformed(evt);
        }
    });

    updateCadButton.setText("Update Cad Docs");
    updateCadButton.setEnabled(false);
    updateCadButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateCadButtonActionPerformed(evt);
        }
    });

    updateCodeButton.setText("Update Code");
    updateCodeButton.setEnabled(false);
    updateCodeButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateCodeButtonActionPerformed(evt);
        }
    });

    updatePdfButton.setText("Update PDF");
    updatePdfButton.setEnabled(false);
    updatePdfButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updatePdfButtonActionPerformed(evt);
        }
    });

    updatePhotosButton.setText("Update Photos");
    updatePhotosButton.setEnabled(false);
    updatePhotosButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updatePhotosButtonActionPerformed(evt);
        }
    });

    updatePlainTextButton.setText("Update Plain Texts");
    updatePlainTextButton.setEnabled(false);
    updatePlainTextButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updatePlainTextButtonActionPerformed(evt);
        }
    });

    updateSpreadSheetsButton.setText("Update SpreadSheets");
    updateSpreadSheetsButton.setEnabled(false);
    updateSpreadSheetsButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateSpreadSheetsButtonActionPerformed(evt);
        }
    });

    updateVideosButton.setText("Update Videos");
    updateVideosButton.setEnabled(false);
    updateVideosButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateVideosButtonActionPerformed(evt);
        }
    });

    updateWordDocsButton.setText("Update Word Docs");
    updateWordDocsButton.setEnabled(false);
    updateWordDocsButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateWordDocsButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(adobeFilesLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cadDocumentLabel1)
                                .addComponent(codeLabel1)
                                .addComponent(hyperlinkLabel1)
                                .addComponent(jLabel2))
                            .addGap(31, 31, 31)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addCADDocumentButton1)
                                .addComponent(addadobefileButton1)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addCadDocsTextField1)
                                        .addComponent(addAdobeTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(clearAdobeFilesButton1)
                                        .addComponent(clearCadDocsButton1)))
                                .addComponent(addCodeButton1)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(addCodeTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearCodeButton2))
                                .addComponent(addHyperlinkButton1)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(addLinkTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(clearLinkButton2)
                                        .addComponent(clearLinkButton1)))
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(locationClientMapLabel1)
                                .addComponent(pdfLabel1)
                                .addComponent(photosLabel1)
                                .addComponent(plainTextFileLabel1)
                                .addComponent(spreadsheetLabel1)
                                .addComponent(videoLabel1)
                                .addComponent(wordDocumentLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addPDFButton1)
                                .addComponent(addLocationClientMapButton1)
                                .addComponent(addPhotoButton1)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(addPhotosTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addPdfTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addAdobeTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(9, 9, 9)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(clearPhotosButton1)
                                        .addComponent(clearPdfButton1)))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(addPlainTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearPlainButton1))
                                .addComponent(addSpreadsheetButton1)
                                .addComponent(addButton1)
                                .addComponent(addPlainTextFileButton1)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(addSpreadSheetTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearSpreadSheetButton1))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(addVideoTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearVideoButton1))
                                .addComponent(addWordDocumentButton1)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(addWordTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearWordButton1)))))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(updateWordDocsButton))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(updateCadButton)
                                .addComponent(updateAdobeButton)
                                .addComponent(updateCodeButton)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(updatePhotosButton)
                                .addComponent(updatePdfButton)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(updatePlainTextButton))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(updateVideosButton))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(updateSpreadSheetsButton))))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(addNewProjectTextArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(89, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(addNewProjectTextArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(1, 1, 1)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(adobeFilesLabel1)
                .addComponent(addadobefileButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addAdobeTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearAdobeFilesButton1)
                .addComponent(updateAdobeButton))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cadDocumentLabel1)
                .addComponent(addCADDocumentButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(addCadDocsTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(1, 1, 1))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearCadDocsButton1)
                    .addComponent(updateCadButton)))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(codeLabel1)
                .addComponent(addCodeButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addCodeTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearCodeButton2)
                .addComponent(updateCodeButton))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(hyperlinkLabel1)
                .addComponent(addHyperlinkButton1))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(clearLinkButton1)
                .addComponent(addLinkTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(1, 1, 1)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(locationClientMapLabel1)
                .addComponent(addLocationClientMapButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addAdobeTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearLinkButton2))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(pdfLabel1)
                .addComponent(addPDFButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addPdfTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearPdfButton1)
                .addComponent(updatePdfButton))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(photosLabel1)
                .addComponent(addPhotoButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(addPhotosTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearPhotosButton1)
                    .addComponent(updatePhotosButton)))
            .addGap(1, 1, 1)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addPlainTextFileButton1)
                .addComponent(plainTextFileLabel1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addPlainTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearPlainButton1)
                .addComponent(updatePlainTextButton))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(spreadsheetLabel1)
                .addComponent(addSpreadsheetButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addSpreadSheetTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearSpreadSheetButton1)
                .addComponent(updateSpreadSheetsButton))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(videoLabel1)
                .addComponent(addButton1))
            .addGap(0, 0, 0)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addVideoTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearVideoButton1)
                .addComponent(updateVideosButton))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(wordDocumentLabel1)
                .addComponent(addWordDocumentButton1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addWordTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearWordButton1)
                .addComponent(updateWordDocsButton))
            .addContainerGap(59, Short.MAX_VALUE))
    );

    multimediaScrollPane.setViewportView(jPanel3);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(multimediaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(multimediaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
            .addContainerGap())
    );
    }// </editor-fold>//GEN-END:initComponents

    private void clearPhotosButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPhotosButton1ActionPerformed
        addPhotosTextField1.setText("");
        updatePhotosButton.setEnabled(true);
    }//GEN-LAST:event_clearPhotosButton1ActionPerformed

    private void addLinkTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLinkTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addLinkTextField2ActionPerformed

    private void addPlainTextFileButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlainTextFileButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Plain Text Files", "txt", "rtf");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addPlainTextField1.getText() != null && addPlainTextField1.getText() != "") {
            allfilenames = addPlainTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addPlainTextField1.setText(allfilenames);
        String[] selectedFilePaths = addPlainTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaPlaintext m = new MediaPlaintext();
            MediaPlaintextPK mpk = new MediaPlaintextPK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaPlaintextPK(mpk);
            plainTextList.add(m);
        }
        updatePlainTextButton.setEnabled(true);
    }//GEN-LAST:event_addPlainTextFileButton1ActionPerformed

    private void clearPdfButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPdfButton1ActionPerformed
        addPdfTextField1.setText("");
        updatePdfButton.setEnabled(true);
    }//GEN-LAST:event_clearPdfButton1ActionPerformed

    private void clearWordButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearWordButton1ActionPerformed
        addWordTextField1.setText("");
        updateWordDocsButton.setEnabled(true);
    }//GEN-LAST:event_clearWordButton1ActionPerformed

    private void clearCadDocsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCadDocsButton1ActionPerformed
        addCadDocsTextField1.setText("");
        updateCadButton.setEnabled(true);
    }//GEN-LAST:event_clearCadDocsButton1ActionPerformed

    private void addCodeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCodeButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Code Files", "java", "js",
                "py", "txt", "c", "rtf", "csv", "html", "xml");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addCodeTextField1.getText() != null && addCodeTextField1.getText() != "") {
            allfilenames = addCodeTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addCodeTextField1.setText(allfilenames);
        String[] selectedFilePaths = addCodeTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaCode m = new MediaCode();
            MediaCodePK mpk = new MediaCodePK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaCodePK(mpk);
            codeFileList.add(m);
        }
        updateCodeButton.setEnabled(true);
    }//GEN-LAST:event_addCodeButton1ActionPerformed

    private void addAdobeTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdobeTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAdobeTextField1ActionPerformed

    private void addCodeTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCodeTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addCodeTextField1ActionPerformed

    private void addWordDocumentButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWordDocumentButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Word Files", "doc", "docx");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addWordTextField1.getText() != null && addWordTextField1.getText() != "") {
            allfilenames = addWordTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addWordTextField1.setText(allfilenames);
        String[] selectedFilePaths = addWordTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaWord m = new MediaWord();
            MediaWordPK mpk = new MediaWordPK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaWordPK(mpk);
            wordList.add(m);
        }
        updateWordDocsButton.setEnabled(true);
    }//GEN-LAST:event_addWordDocumentButton1ActionPerformed

    private void clearLinkButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLinkButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearLinkButton2ActionPerformed

    private void clearPlainButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPlainButton1ActionPerformed
        addPlainTextFileButton1.setText("");
        updatePlainTextButton.setEnabled(true);
    }//GEN-LAST:event_clearPlainButton1ActionPerformed

    private void addHyperlinkButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHyperlinkButton1ActionPerformed
    }//GEN-LAST:event_addHyperlinkButton1ActionPerformed

    private void addAdobeTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdobeTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAdobeTextField2ActionPerformed

    private void addSpreadsheetButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSpreadsheetButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Spreadsheet Files", "xls", "xlsx");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addSpreadSheetTextField1.getText() != null && addSpreadSheetTextField1.getText() != "") {
            allfilenames = addSpreadSheetTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addSpreadSheetTextField1.setText(allfilenames);
        String[] selectedFilePaths = addSpreadSheetTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaSpreadsheet m = new MediaSpreadsheet();
            MediaSpreadsheetPK mpk = new MediaSpreadsheetPK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaSpreadsheetPK(mpk);
            spreadSheetList.add(m);
        }
        updateSpreadSheetsButton.setEnabled(true);
    }//GEN-LAST:event_addSpreadsheetButton1ActionPerformed

    private void clearSpreadSheetButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSpreadSheetButton1ActionPerformed
        addSpreadSheetTextField1.setText("");
        updateSpreadSheetsButton.setEnabled(true);
    }//GEN-LAST:event_clearSpreadSheetButton1ActionPerformed

    private void addPhotoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPhotoButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "png", "ai", "jpeg", 
                "jpg", "tiff");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addPhotosTextField1.getText() != null && addPhotosTextField1.getText() != "") {
            allfilenames = addPhotosTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addPhotosTextField1.setText(allfilenames);
        String[] selectedFilePaths = addPhotosTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaPhotos m = new MediaPhotos();
            MediaPhotosPK mpk = new MediaPhotosPK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaPhotosPK(mpk);
            photosList.add(m);
        }
        updatePhotosButton.setEnabled(true);
    }//GEN-LAST:event_addPhotoButton1ActionPerformed

    private void addButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Video Files", "flv", "mp4");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addVideoTextField1.getText() != null && addVideoTextField1.getText() != "") {
            allfilenames = addVideoTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addVideoTextField1.setText(allfilenames);
        String[] selectedFilePaths = addVideoTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaVideo m = new MediaVideo();
            MediaVideoPK mpk = new MediaVideoPK();
            m.setTitle(selectedFileName);
            m.setFileType("video");
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaVideoPK(mpk);
            videoList.add(m);
        }
        updateVideosButton.setEnabled(true);
    }//GEN-LAST:event_addButton1ActionPerformed

    private void addadobefileButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addadobefileButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Adobe Files", "pdf", "dmg");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addAdobeTextField1.getText() != null && addAdobeTextField1.getText() != "") {
            allfilenames = addAdobeTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addAdobeTextField1.setText(allfilenames);
        String[] selectedFilePaths = addAdobeTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaAdobe m = new MediaAdobe();
            MediaAdobePK mpk = new MediaAdobePK();
            m.setTitle(selectedFileName);
            m.setFileType("PDF");
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaAdobePK(mpk);
            adobeFileList.add(m);
        }
        updateAdobeButton.setEnabled(true);
    }//GEN-LAST:event_addadobefileButton1ActionPerformed

    private void addCadDocsTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCadDocsTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addCadDocsTextField1ActionPerformed

    private void clearLinkButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLinkButton1ActionPerformed
    }//GEN-LAST:event_clearLinkButton1ActionPerformed

    private void clearCodeButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCodeButton2ActionPerformed
        addCodeTextField1.setText("");
        updateCodeButton.setEnabled(true);
    }//GEN-LAST:event_clearCodeButton2ActionPerformed

    private void addCADDocumentButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCADDocumentButton1ActionPerformed
        JFileChooser chooser = new JFileChooser("File Dialog");

        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addCadDocsTextField1.getText() != null && addCadDocsTextField1.getText() != "") {
            allfilenames = addCadDocsTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addCadDocsTextField1.setText(allfilenames);
        String[] selectedFilePaths = addCadDocsTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaCad m = new MediaCad();
            MediaCadPK mpk = new MediaCadPK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaCadPK(mpk);
            cadFileList.add(m);
        }
        updateCadButton.setEnabled(true);
    }//GEN-LAST:event_addCADDocumentButton1ActionPerformed

    private void clearVideoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearVideoButton1ActionPerformed
        addVideoTextField1.setText("");
        updateVideosButton.setEnabled(true);
    }//GEN-LAST:event_clearVideoButton1ActionPerformed

    private void addPDFButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPDFButton1ActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF Files", "pdf");
        JFileChooser chooser = new JFileChooser("File Dialog");
        chooser.setFileFilter(filter);
        
        //File f = chooser.getSelectedFile();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] f = chooser.getSelectedFiles();
        String allfilenames = "";
        if (addPdfTextField1.getText() != null && addPdfTextField1.getText() != "") {
            allfilenames = addPdfTextField1.getText();
        }
        for (int i = 0; i < f.length; i++) {
            allfilenames = allfilenames.concat(f[i].getAbsolutePath()).concat(",");
        }
        addPdfTextField1.setText(allfilenames);
        String[] selectedFilePaths = addPdfTextField1.getText().split(",");

        for (int i = 0; i < selectedFilePaths.length; i++) {
            int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
            int dotIndex = selectedFilePaths[i].lastIndexOf(".");
            String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
            MediaPdf m = new MediaPdf();
            MediaPdfPK mpk = new MediaPdfPK();
            m.setTitle(selectedFileName);
            mpk.setFilePath(selectedFilePaths[i]);
            m.setMediaPdfPK(mpk);
            pdfList.add(m);
        }
        updatePdfButton.setEnabled(true);
    }//GEN-LAST:event_addPDFButton1ActionPerformed

    private void clearAdobeFilesButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAdobeFilesButton1ActionPerformed
        addAdobeTextField1.setText("");
        updateAdobeButton.setEnabled(true);
    }//GEN-LAST:event_clearAdobeFilesButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        System.out.println("project id : " + projectId);
        List<MediaAdobe> adobeFileList = editProjectMultimediaController.fetchAdobeFiles(projectId);
        String adobeFiles = "";
        for (int i = 0; i < adobeFileList.size(); i++) {
            MediaAdobe mediaAdobe = adobeFileList.get(i);
            adobeFiles = adobeFiles.concat(mediaAdobe.getMediaAdobePK().getFilePath()).concat(",");
        }
        addAdobeTextField1.setText(adobeFiles);

        List<MediaCad> cadFileList = editProjectMultimediaController.fetchCadFiles(projectId);
        String cadFiles = "";
        for (int i = 0; i < cadFileList.size(); i++) {
            MediaCad mediaCad = cadFileList.get(i);
            cadFiles = cadFiles.concat(mediaCad.getMediaCadPK().getFilePath()).concat(",");
        }
        addCadDocsTextField1.setText(cadFiles);

        List<MediaCode> codeFileList = editProjectMultimediaController.fetchCodeFiles(projectId);
        String codeFiles = "";
        for (int i = 0; i < codeFileList.size(); i++) {
            MediaCode mediaCode = codeFileList.get(i);
            codeFiles = codeFiles.concat(mediaCode.getMediaCodePK().getFilePath()).concat(",");
        }
        addCodeTextField1.setText(codeFiles);

        List<MediaPdf> pdfFileList = editProjectMultimediaController.fetchPdfFiles(projectId);
        String pdfFiles = "";
        for (int i = 0; i < pdfFileList.size(); i++) {
            MediaPdf mediapdf = pdfFileList.get(i);
            pdfFiles = pdfFiles.concat(mediapdf.getMediaPdfPK().getFilePath()).concat(",");
        }
        addPdfTextField1.setText(pdfFiles);

        List<MediaPhotos> photosFileList = editProjectMultimediaController.fetchPhotosFiles(projectId);
        String photosFiles = "";
        for (int i = 0; i < photosFileList.size(); i++) {
            MediaPhotos mediaPhotos = photosFileList.get(i);
            photosFiles = photosFiles.concat(mediaPhotos.getMediaPhotosPK().getFilePath()).concat(",");
        }
        addPhotosTextField1.setText(photosFiles);

        List<MediaPlaintext> plaintTextFileList = editProjectMultimediaController.fetchPlainTextFiles(projectId);
        String plaintextFiles = "";
        for (int i = 0; i < plaintTextFileList.size(); i++) {
            MediaPlaintext mediaPlainText = plaintTextFileList.get(i);
            plaintextFiles = plaintextFiles.concat(mediaPlainText.getMediaPlaintextPK().getFilePath()).concat(",");
        }
        addPlainTextField1.setText(plaintextFiles);

        List<MediaSpreadsheet> spreadsheetFileList = editProjectMultimediaController.fetchSpreadsheetFiles(projectId);
        String spreadsheetFiles = "";
        for (int i = 0; i < spreadsheetFileList.size(); i++) {
            MediaSpreadsheet mediaSpreadsheet = spreadsheetFileList.get(i);
            spreadsheetFiles = spreadsheetFiles.concat(mediaSpreadsheet.getMediaSpreadsheetPK().getFilePath()).concat(",");
        }
        addSpreadSheetTextField1.setText(spreadsheetFiles);

        List<MediaVideo> videoFileList = editProjectMultimediaController.fetchVideoFiles(projectId);
        String videoFiles = "";
        for (int i = 0; i < videoFileList.size(); i++) {
            MediaVideo mediaVideo = videoFileList.get(i);
            videoFiles = videoFiles.concat(mediaVideo.getMediaVideoPK().getFilePath()).concat(",");
        }
        addVideoTextField1.setText(videoFiles);

        List<MediaWord> wordFileList = editProjectMultimediaController.fetchWordFiles(projectId);
        String wordFiles = "";
        for (int i = 0; i < wordFileList.size(); i++) {
            MediaWord mediaword = wordFileList.get(i);
            wordFiles = wordFiles.concat(mediaword.getMediaWordPK().getFilePath()).concat(",");
        }
        addWordTextField1.setText(wordFiles);

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void updateAdobeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAdobeButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        adobeFileList.clear();
        String adobeFiles = addAdobeTextField1.getText();
        if (!adobeFiles.equals("")) {
            String[] selectedFilePaths = adobeFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaAdobe m = new MediaAdobe();
                MediaAdobePK mpk = new MediaAdobePK();
                m.setTitle(selectedFileName);
                m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaAdobePK(mpk);
                adobeFileList.add(m);
            }
            for (int i = 0; i < adobeFileList.size(); i++) {
                MediaAdobe mediaAdobe = adobeFileList.get(i);
                System.out.println("media project id : " + mediaAdobe.getMediaAdobePK().getProjectId());

            }
        }
        boolean success = editProjectMultimediaController.updateAdobeFiles(projectId, adobeFileList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Adobe Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Adobe Files updation Failed");
        }
    }//GEN-LAST:event_updateAdobeButtonActionPerformed

    private void updateCadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCadButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        cadFileList.clear();
        String cadFiles = addCadDocsTextField1.getText();
        if (!cadFiles.equals("")) {
            String[] selectedFilePaths = cadFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaCad m = new MediaCad();
                MediaCadPK mpk = new MediaCadPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaCadPK(mpk);
                cadFileList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updateCadFiles(projectId, cadFileList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Cad Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Cad Files updation Failed");
        }

    }//GEN-LAST:event_updateCadButtonActionPerformed

    private void updateCodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCodeButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        codeFileList.clear();
        String codeFiles = addCodeTextField1.getText();
        if (!codeFiles.equals("")) {
            String[] selectedFilePaths = codeFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaCode m = new MediaCode();
                MediaCodePK mpk = new MediaCodePK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaCodePK(mpk);
                codeFileList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updateCodeFiles(projectId, codeFileList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Code Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Code Files updation Failed");
        }

    }//GEN-LAST:event_updateCodeButtonActionPerformed

    private void updatePdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePdfButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        pdfList.clear();
        String pdfFiles = addPdfTextField1.getText();
        if (!pdfFiles.equals("")) {
            String[] selectedFilePaths = pdfFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaPdf m = new MediaPdf();
                MediaPdfPK mpk = new MediaPdfPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaPdfPK(mpk);
                pdfList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updatePdfFiles(projectId, pdfList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "PDF Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "PDF Files updation Failed");
        }
    }//GEN-LAST:event_updatePdfButtonActionPerformed

    private void updatePhotosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePhotosButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        photosList.clear();
        String photosFiles = addPhotosTextField1.getText();
        if (!photosFiles.equals("")) {
            String[] selectedFilePaths = photosFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaPhotos m = new MediaPhotos();
                MediaPhotosPK mpk = new MediaPhotosPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaPhotosPK(mpk);
                photosList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updatePhotoFiles(projectId, photosList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Photo Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Photo Files updation Failed");
        }
    }//GEN-LAST:event_updatePhotosButtonActionPerformed

    private void updatePlainTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePlainTextButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        plainTextList.clear();
        String plainFiles = addPlainTextField1.getText();
        if (!plainFiles.equals("")) {
            String[] selectedFilePaths = plainFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaPlaintext m = new MediaPlaintext();
                MediaPlaintextPK mpk = new MediaPlaintextPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaPlaintextPK(mpk);
                plainTextList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updatePlainTextFiles(projectId, plainTextList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Plain Text Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Plain Text Files updation Failed");
        }
    }//GEN-LAST:event_updatePlainTextButtonActionPerformed

    private void updateSpreadSheetsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSpreadSheetsButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        spreadSheetList.clear();
        String sheetFiles = addSpreadSheetTextField1.getText();
        if (!sheetFiles.equals("")) {
            String[] selectedFilePaths = sheetFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaSpreadsheet m = new MediaSpreadsheet();
                MediaSpreadsheetPK mpk = new MediaSpreadsheetPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaSpreadsheetPK(mpk);
                spreadSheetList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updateSpreadSheetFiles(projectId, spreadSheetList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Spread Sheet Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Spread Sheet Files updation Failed");
        }
    }//GEN-LAST:event_updateSpreadSheetsButtonActionPerformed

    private void updateVideosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateVideosButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        videoList.clear();
        String videoFiles = addVideoTextField1.getText();
        if (!videoFiles.equals("")) {
            String[] selectedFilePaths = videoFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaVideo m = new MediaVideo();
                MediaVideoPK mpk = new MediaVideoPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaVideoPK(mpk);
                videoList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updateVideoFiles(projectId, videoList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Video Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Video Files updation Failed");
        }
    }//GEN-LAST:event_updateVideosButtonActionPerformed

    private void updateWordDocsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWordDocsButtonActionPerformed
        // TODO add your handling code here:
        Object projectItem = jComboBox1.getSelectedItem();
        String projectId = ((ComboItem) projectItem).getValue();
        wordList.clear();
        String wordFiles = addWordTextField1.getText();
        if (!wordFiles.equals("")) {
            String[] selectedFilePaths = wordFiles.split(",");

            for (int i = 0; i < selectedFilePaths.length; i++) {
                int lastIndex = selectedFilePaths[i].lastIndexOf("\\");
                int dotIndex = selectedFilePaths[i].lastIndexOf(".");
                String selectedFileName = selectedFilePaths[i].substring(lastIndex + 1, dotIndex);
                MediaWord m = new MediaWord();
                MediaWordPK mpk = new MediaWordPK();
                m.setTitle(selectedFileName);
                //m.setFileType("PDF");
                Project p = new Project(Integer.parseInt(projectId));
                m.setDescription("");
                m.setProjects(p);
                mpk.setFilePath(selectedFilePaths[i]);
                mpk.setProjectId(Integer.parseInt(projectId));
                m.setMediaWordPK(mpk);
                wordList.add(m);
            }
           
        }
        boolean success = editProjectMultimediaController.updateWordFiles(projectId, wordList);
        if (success) {
            JOptionPane.showMessageDialog(jPanel3, "Word Files updation Successful");
        } else {
            JOptionPane.showMessageDialog(jPanel3, "Word Files updation Failed");
        }
    }//GEN-LAST:event_updateWordDocsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addAdobeTextField1;
    private javax.swing.JTextField addAdobeTextField2;
    private javax.swing.JButton addButton1;
    private javax.swing.JButton addCADDocumentButton1;
    private javax.swing.JTextField addCadDocsTextField1;
    private javax.swing.JButton addCodeButton1;
    private javax.swing.JTextField addCodeTextField1;
    private javax.swing.JButton addHyperlinkButton1;
    private javax.swing.JTextField addLinkTextField2;
    private javax.swing.JButton addLocationClientMapButton1;
    private javax.swing.JLabel addNewProjectTextArea2;
    private javax.swing.JButton addPDFButton1;
    private javax.swing.JTextField addPdfTextField1;
    private javax.swing.JButton addPhotoButton1;
    private javax.swing.JTextField addPhotosTextField1;
    private javax.swing.JTextField addPlainTextField1;
    private javax.swing.JButton addPlainTextFileButton1;
    private javax.swing.JTextField addSpreadSheetTextField1;
    private javax.swing.JButton addSpreadsheetButton1;
    private javax.swing.JTextField addVideoTextField1;
    private javax.swing.JButton addWordDocumentButton1;
    private javax.swing.JTextField addWordTextField1;
    private javax.swing.JButton addadobefileButton1;
    private javax.swing.JLabel adobeFilesLabel1;
    private javax.swing.JLabel cadDocumentLabel1;
    private javax.swing.JButton clearAdobeFilesButton1;
    private javax.swing.JButton clearCadDocsButton1;
    private javax.swing.JButton clearCodeButton2;
    private javax.swing.JButton clearLinkButton1;
    private javax.swing.JButton clearLinkButton2;
    private javax.swing.JButton clearPdfButton1;
    private javax.swing.JButton clearPhotosButton1;
    private javax.swing.JButton clearPlainButton1;
    private javax.swing.JButton clearSpreadSheetButton1;
    private javax.swing.JButton clearVideoButton1;
    private javax.swing.JButton clearWordButton1;
    private javax.swing.JLabel codeLabel1;
    private javax.swing.JLabel hyperlinkLabel1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel locationClientMapLabel1;
    private javax.swing.JScrollPane multimediaScrollPane;
    private javax.swing.JLabel pdfLabel1;
    private javax.swing.JLabel photosLabel1;
    private javax.swing.JLabel plainTextFileLabel1;
    private javax.swing.JLabel spreadsheetLabel1;
    private javax.swing.JButton updateAdobeButton;
    private javax.swing.JButton updateCadButton;
    private javax.swing.JButton updateCodeButton;
    private javax.swing.JButton updatePdfButton;
    private javax.swing.JButton updatePhotosButton;
    private javax.swing.JButton updatePlainTextButton;
    private javax.swing.JButton updateSpreadSheetsButton;
    private javax.swing.JButton updateVideosButton;
    private javax.swing.JButton updateWordDocsButton;
    private javax.swing.JLabel videoLabel1;
    private javax.swing.JLabel wordDocumentLabel1;
    // End of variables declaration//GEN-END:variables
}
