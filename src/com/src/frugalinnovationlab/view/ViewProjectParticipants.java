/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.src.frugalinnovationlab.view;

import com.src.frugalinnovationlab.Controller.ViewProjectParticipantsController;
import com.src.frugalinnovationlab.Entity.ParticipantDesignation;
import com.src.frugalinnovationlab.Entity.Participants;
import com.src.frugalinnovationlab.Entity.Project;
import com.src.frugalinnovationlab.Wrappers.ComboItem;
import com.src.frugalinnovationlab.helper.Printer;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.text.MessageFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hinsen Chan
 */
public class ViewProjectParticipants extends javax.swing.JPanel {

    ViewProjectParticipantsController viewProjectParticipantsController;
    List<Project> projectList;
    List<ParticipantDesignation> participantDesignationsList;
    List<Participants> participants;
    DefaultTableModel model = new DefaultTableModel();
    WelcomeAbstract mainApplication;
    private String participantValue;
    private boolean isSelectAll = false;
    MessageFormat header = null;

    /**
     * Creates new form ViewProjectParticipants
     */
    public ViewProjectParticipants(WelcomeAbstract welcome) {
        mainApplication = welcome;
        viewProjectParticipantsController = new ViewProjectParticipantsController(this);
        projectList = viewProjectParticipantsController.getProjectsFromDatabase();
        participantDesignationsList = viewProjectParticipantsController.getParticipantsDesignationFromDatabase();
        participants = viewProjectParticipantsController.getParticipantsFromDatabase();
        initComponents();
        table.getSelectionModel().addListSelectionListener(viewProjectParticipantsController);
        refreshSelectedProject();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        addNewProjectLabel = new javax.swing.JLabel();
        projectNameLabel = new javax.swing.JLabel();
        participantNameLabel = new javax.swing.JLabel();
        chooseProjectComboBox = new javax.swing.JComboBox();
        roleComboBox = new javax.swing.JComboBox();
        logoLabel2 = new javax.swing.JLabel();
        printInfoButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        projectLabel = new javax.swing.JLabel();

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        topPanel.setBackground(new java.awt.Color(255, 255, 255));

        addNewProjectLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        addNewProjectLabel.setText("View Project Participants");

        projectNameLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        projectNameLabel.setText("Project Name");

        participantNameLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        participantNameLabel.setText("Participant Role");

        chooseProjectComboBox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        chooseProjectComboBox.setForeground(new java.awt.Color(0, 95, 45));
        chooseProjectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a project...", "Select All" }));
        for (int i = 0; i < projectList.size(); i++) {
            chooseProjectComboBox.addItem(new ComboItem(projectList.get(i).getName(),
                String.valueOf(projectList.get(i).getId())));
    }
    chooseProjectComboBox.setMaximumSize(new java.awt.Dimension(200, 200));
    chooseProjectComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chooseProjectComboBoxActionPerformed(evt);
        }
    });

    roleComboBox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
    roleComboBox.setForeground(new java.awt.Color(0, 95, 45));
    roleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Roles" }));
    for (int i = 0; i < participantDesignationsList.size(); i++) {
        roleComboBox.addItem(new ComboItem(participantDesignationsList.get(i).getName(),
            String.valueOf(participantDesignationsList.get(i).getId())));
    }
    roleComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            roleComboBoxActionPerformed(evt);
        }
    });

    logoLabel2.setBackground(new java.awt.Color(255, 255, 255));
    logoLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/scu-mission.png"))); // NOI18N

    printInfoButton.setText("View Printable Information");
    printInfoButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            printInfoButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
    topPanel.setLayout(topPanelLayout);
    topPanelLayout.setHorizontalGroup(
        topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(topPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(topPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(printInfoButton))
                .addGroup(topPanelLayout.createSequentialGroup()
                    .addComponent(projectNameLabel)
                    .addGap(80, 80, 80)
                    .addComponent(chooseProjectComboBox, 0, 262, Short.MAX_VALUE))
                .addGroup(topPanelLayout.createSequentialGroup()
                    .addComponent(addNewProjectLabel)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(topPanelLayout.createSequentialGroup()
                    .addComponent(participantNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(49, 49, 49)
                    .addComponent(roleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(logoLabel2)
            .addContainerGap())
    );
    topPanelLayout.setVerticalGroup(
        topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(topPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(topPanelLayout.createSequentialGroup()
                    .addComponent(logoLabel2)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(topPanelLayout.createSequentialGroup()
                    .addComponent(addNewProjectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(36, 36, 36)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(projectNameLabel)
                        .addComponent(chooseProjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(participantNameLabel)
                        .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(printInfoButton)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    topPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {chooseProjectComboBox, roleComboBox});

    bottomPanel.setBackground(new java.awt.Color(255, 255, 255));

    table.setAutoCreateRowSorter(true);
    table.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Id", "Name", "Role", "Email Address", "Contact Number"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    table.setToolTipText("Select a participant to view his/her details");
    table.setColumnSelectionAllowed(true);
    table.getTableHeader().setReorderingAllowed(false);
    tableScrollPane.setViewportView(table);
    table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
    bottomPanel.setLayout(bottomPanelLayout);
    bottomPanelLayout.setHorizontalGroup(
        bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(bottomPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addComponent(projectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    bottomPanelLayout.setVerticalGroup(
        bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(bottomPanelLayout.createSequentialGroup()
            .addComponent(projectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(43, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(mainPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bottomPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    mainPanelLayout.setVerticalGroup(
        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(mainPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(48, Short.MAX_VALUE))
    );

    mainScrollPane.setViewportView(mainPanel);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainScrollPane)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
    );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseProjectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseProjectComboBoxActionPerformed
        // TODO add your handling code here:
        Object projectItem = getChooseProjectComboBox().getSelectedItem();

        if (!projectItem.toString().equals("Choose a project...")) {
            if (projectItem.toString().equals("Select All")) {
                setIsSelectAll(true);
                mainApplication.setSelectedProject("Choose a project...");

                if (model.getRowCount() > 0) {
                    for (int i = model.getRowCount() - 1; i > -1; i--) {
                        model.removeRow(i);
                    }
                }

                List<Participants> result = viewProjectParticipantsController.getParticipantsFromDatabase();

                for (int i = 0; i < result.size(); i++) {
                    Participants values = result.get(i);
                    String id = values.getId().toString();
                    String participantItem = values.getLastname().concat(", ").concat(values.getFirstname());
                    if (!values.getNameTitle().toString().equalsIgnoreCase("")) {
                        participantItem = participantItem.concat(" ("+values.getNameTitle().toString()+")");
                    }                    
                    String roleItem = values.getPosition();
                    String email = values.getEmail();
                    String phone = values.getPhone();

                    Object[] row = {id, participantItem, roleItem, email, phone};
                    model = (DefaultTableModel) table.getModel();
                    model.addRow(row);
                }
            }
            else {
                setIsSelectAll(false);
                String projectId = String.valueOf(((ComboItem) projectItem).getValue());

                if (model.getRowCount() > 0) {
                    for (int i = model.getRowCount() - 1; i > -1; i--) {
                        model.removeRow(i);
                    }
                }

                List result = viewProjectParticipantsController.fetchParticipantsByProject(projectId);

                for (int i = 0; i < result.size(); i++) {
                    Object[] values = (Object[]) result.get(i);
                    String id = String.valueOf(values[3]);
                    String participantItem = values[2].toString().concat(", ").concat(values[1].toString());
                    if(!values[0].toString().equalsIgnoreCase("")){
                        participantItem = participantItem.concat(" ("+values[0].toString()+")");
                    }
                    String roleValue = values[4].toString();
                    String roleItem = values[5].toString();
                    String email = values[6].toString();
                    String phone = values[7].toString();

                    Object[] row = {id, participantItem, roleItem, email, phone};
                    model = (DefaultTableModel) table.getModel();
                    model.addRow(row);
                }

                mainApplication.setSelectedProject(chooseProjectComboBox.getSelectedItem().toString());
                mainApplication.getViewGeneralProjectInformation().refreshSelectedProject();
                mainApplication.getViewMediaPanel().refreshSelectedProject();
            }
        } else {
            model = (DefaultTableModel) table.getModel();
            if (model.getRowCount() > 0) {
                for (int i = model.getRowCount() - 1; i > -1; i--) {
                    model.removeRow(i);
                }
            }            
        }
    }//GEN-LAST:event_chooseProjectComboBoxActionPerformed

    private void roleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleComboBoxActionPerformed
        Object projectItem = getChooseProjectComboBox().getSelectedItem();

        if (!projectItem.toString().equals("Choose a project...")) {
            if (projectItem.toString().equals("Select All")) {
                Object roleItem = roleComboBox.getSelectedItem();

                if (model.getRowCount() > 0) {
                    for (int i = model.getRowCount() - 1; i > -1; i--) {
                        model.removeRow(i);
                    }
                }

                List<Participants> result = viewProjectParticipantsController.getParticipantsFromDatabase();

                if (roleItem.toString().equals("All Roles")) {
                    for (int i = 0; i < result.size(); i++) {
                        Participants values = result.get(i);
                        String id = values.getId().toString();
                        String participantItem = values.getLastname().concat(", ").concat(values.getFirstname());
                        if (!values.getNameTitle().toString().equalsIgnoreCase("")) {
                            participantItem = participantItem.concat(" ("+values.getNameTitle().toString()+")");
                        }                    
                        String role = values.getPosition();
                        String email = values.getEmail();
                        String phone = values.getPhone();

                        Object[] row = {id, participantItem, role, email, phone};
                        model = (DefaultTableModel) table.getModel();
                        model.addRow(row);
                    }
                } else {
                    for (int i = 0; i < result.size(); i++) {
                        Participants values = result.get(i);
                        String id= values.getId().toString();
                        String participantItem = values.getLastname().concat(", ").concat(values.getFirstname());
                        if (!values.getNameTitle().toString().equalsIgnoreCase("")) {
                            participantItem = participantItem.concat(" ("+values.getNameTitle().toString()+")");
                        }                    
                        String role = values.getPosition();
                        String email = values.getEmail();
                        String phone = values.getPhone();

                        if (role.equals(roleItem.toString())) {
                            Object[] row = {id, participantItem, roleItem, email, phone};
                            model = (DefaultTableModel) table.getModel();
                            model.addRow(row);
                        }
                    }
                }            
            }
            else {
                String projectId = String.valueOf(((ComboItem) projectItem).getValue());
                Object roleItem = roleComboBox.getSelectedItem();

                if (model.getRowCount() > 0) {
                    for (int i = model.getRowCount() - 1; i > -1; i--) {
                        model.removeRow(i);
                    }
                }

                List result = viewProjectParticipantsController.fetchParticipantsByProject(projectId);

                if (roleItem.toString().equals("All Roles")) {
                    for (int i = 0; i < result.size(); i++) {
                        Object[] values = (Object[]) result.get(i);
                        String id = String.valueOf(values[3]);
                        String participantItem = values[2].toString() + ", " + values[1].toString();
                        if (!values[0].toString().equals("")) {
                            participantItem = participantItem.concat(" (" + values[0] + ")");
                        }
                        String roleValue = values[4].toString();
                        String role = values[5].toString();
                        String email = values[6].toString();
                        String phone = values[7].toString();

                        Object[] row = {id, participantItem, role, email, phone};
                        model = (DefaultTableModel) table.getModel();
                        model.addRow(row);
                    }
                } else {
                    for (int i = 0; i < result.size(); i++) {
                        Object[] values = (Object[]) result.get(i);
                        String id = String.valueOf(values[3]);
                        String participantItem = values[2].toString() + ", " + values[1].toString();
                        if (!values[0].toString().equals("")) {
                            participantItem = participantItem.concat(" (" + values[0] + ")");
                        }                        
                        String roleValue = values[4].toString();
                        String role = values[5].toString();
                        String email = values[6].toString();
                        String phone = values[7].toString();

                        if (role.equals(roleItem.toString())) {
                            Object[] row = {id, participantItem, roleItem, email, phone};
                            model = (DefaultTableModel) table.getModel();
                            model.addRow(row);
                        }
                    }
                }
            }
        } else {
            model = (DefaultTableModel) table.getModel();
            if (model.getRowCount() > 0) {
                for (int i = model.getRowCount() - 1; i > -1; i--) {
                    model.removeRow(i);
                }
            }            
        }
    }//GEN-LAST:event_roleComboBoxActionPerformed

    private void printInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInfoButtonActionPerformed
        // TODO add your handling code here:
        PrinterJob pjob = PrinterJob.getPrinterJob();
        PageFormat preformat = pjob.defaultPage();
        preformat.setOrientation(PageFormat.PORTRAIT);
        PageFormat postformat = pjob.pageDialog(preformat);
        //If user does not hit cancel then print.
        if (preformat != postformat) {
            //Set print component
            pjob.setPrintable(new Printer(bottomPanel), postformat);
            if (pjob.printDialog()) {
                try {
                    PrintRequestAttributeSet set = new HashPrintRequestAttributeSet();
                    set.add(OrientationRequested.PORTRAIT);
                    //pjob.print();
                    table.print(JTable.PrintMode.FIT_WIDTH, header, null, false, set, false);
                } catch (PrinterException ex) {
                    Logger.getLogger(EditProjectParticipants.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_printInfoButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addNewProjectLabel;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JComboBox chooseProjectComboBox;
    private javax.swing.JLabel logoLabel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JLabel participantNameLabel;
    private javax.swing.JButton printInfoButton;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JComboBox roleComboBox;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    public WelcomeAbstract getMainApplication() {
        return mainApplication;
    }

    public JTable getTable() {
        return table;
    }

    /**
     * @return the participantValue
     */
    public String getParticipantValue() {
        return participantValue;
    }

    /**
     * @return the chooseProjectComboBox
     */
    public javax.swing.JComboBox getChooseProjectComboBox() {
        return chooseProjectComboBox;
    }

    /**
     * @param chooseProjectComboBox the chooseProjectComboBox to set
     */
    public void setChooseProjectComboBox(javax.swing.JComboBox chooseProjectComboBox) {
        this.chooseProjectComboBox = chooseProjectComboBox;
    }

    public void refreshSelectedProject() {
        if (this.isSelectAll) {
            getChooseProjectComboBox().setSelectedIndex(1);
        } else {
            String selectedProject = mainApplication.getSelectedProject();
            if (selectedProject != null) {
                int index = findSelectedProject(selectedProject);
                if (index > -1) {
                    getChooseProjectComboBox().setSelectedIndex(index);
                }
            }
        }
    }

    public int findSelectedProject(String selectedProject) {
        if (selectedProject != null) {
            for (int i = 0; i < chooseProjectComboBox.getItemCount(); i++) {
                if (chooseProjectComboBox.getItemAt(i).toString().equals(selectedProject)) {
                    return i;
                }
            }
        }
        return -1;
    }

    /**
     * @return the isSelectAll
     */
    public boolean isIsSelectAll() {
        return isSelectAll;
    }

    /**
     * @param isSelectAll the isSelectAll to set
     */
    public void setIsSelectAll(boolean isSelectAll) {
        this.isSelectAll = isSelectAll;
    }
    
    public boolean getIsSelectAll() {
        return isSelectAll;
    }
}
